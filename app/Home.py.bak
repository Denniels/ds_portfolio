import streamlit as st
from utils.data_loader_local import LocalDataLoader
import plotly.express as px
import folium
from streamlit_folium import st_folium
import pandas as pd

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="An√°lisis de Emisiones RETC Chile",
    page_icon="üåç",
    layout="wide"
)

# Inicializaci√≥n del DataLoader
data_loader = LocalDataLoader()

# T√≠tulo principal
st.title("üåç An√°lisis de Emisiones RETC Chile")
st.markdown("""
Esta aplicaci√≥n presenta un an√°lisis detallado de las emisiones atmosf√©ricas en Chile,
basado en los datos del Registro de Emisiones y Transferencias de Contaminantes (RETC).
""")

# Resumen de emisiones
with st.container():
    st.subheader("üìä Resumen General")
    summary = data_loader.get_emissions_summary()
    
    if summary:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Emisiones (ton)", f"{summary['total_emissions']:,.2f}")
        with col2:
            st.metric("Promedio por Instalaci√≥n (ton)", f"{summary['average_emissions']:,.2f}")
        with col3:
            st.metric("N√∫mero de Instalaciones", f"{summary['num_facilities']:,}")

# Emisiones por regi√≥n
with st.container():
    st.subheader("üó∫Ô∏è Emisiones por Regi√≥n")
    emissions_by_region = data_loader.get_emissions_by_region()
    
    if not emissions_by_region.empty:
        emissions_by_region.columns = ['region', 'total_emision', 'promedio_emision', 'num_instalaciones']
        
        # Crear gr√°fico de barras
        fig = px.bar(
            emissions_by_region,
            x='region',
            y='total_emision',
            title='Emisiones Totales por Regi√≥n',
            labels={
                'region': 'Regi√≥n',
                'total_emision': 'Emisiones Totales (ton)'
            }
        )
        fig.update_layout(
            xaxis_tickangle=-45,
            showlegend=False,
            height=500
        )
        st.plotly_chart(fig, use_container_width=True)

# Top emisores
with st.container():
    st.subheader("üè≠ Principales Emisores")
    top_emitters = data_loader.get_top_emitters(limit=10)
    
    if not top_emitters.empty:
        st.dataframe(
            top_emitters.style.format({
                'emision': '{:,.2f}'
            }).hide_index_(),
            use_container_width=True
        )

# Mapa geogr√°fico
with st.container():
    st.subheader("üìç Distribuci√≥n Geogr√°fica de Emisiones")
    geo_data = data_loader.get_geographical_data()
    
    if not geo_data.empty:
        # Crear mapa base centrado en Chile
        m = folium.Map(location=[-33.4489, -70.6693], zoom_start=4)
          # Filtrar datos con coordenadas v√°lidas
        geo_data = geo_data.dropna(subset=['latitud', 'longitud'])
        
        # Agregar marcadores para cada instalaci√≥n
        for _, row in geo_data.iterrows():
            # Asegurarse de que emision sea num√©rico
            try:
                emisiones_num = float(row['emision'])
                emisiones_str = f"{emisiones_num:,.2f}"
            except (ValueError, TypeError):
                emisiones_str = str(row['emision'])
            
            # Verificar que las coordenadas son v√°lidas
            if pd.notna(row['latitud']) and pd.notna(row['longitud']):
                folium.CircleMarker(
                    location=[float(row['latitud']), float(row['longitud'])],
                    radius=5,
                    popup=f"{row['nombre_establecimiento']}<br>Emisiones: {emisiones_str} ton",
                    color='red',
                    fill=True
                ).add_to(m)
        
        # Mostrar el mapa
        st_folium(m, width=800, height=600)

# Pie de p√°gina
st.markdown("""
---
Datos obtenidos del [Registro de Emisiones y Transferencias de Contaminantes (RETC)](https://retc.mma.gob.cl/)
""")