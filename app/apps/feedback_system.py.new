"""
Sistema de Feedback para el Portafolio
=====================================
Permite a los usuarios dejar comentarios y sugerencias,
almacen√°ndolos en Firestore para optimizar el uso de la capa gratuita de GCP.
"""

import streamlit as st
import json
from datetime import datetime
from google.cloud import firestore
import uuid
from pathlib import Path
import os
import sys

# Sistema de almacenamiento de feedback con Firestore
class FeedbackSystem:
    def __init__(self):
        """Inicializa el sistema de feedback con Firestore"""
        try:
            # Intentar inicializar Firestore
            self.db = firestore.Client()
            self.collection = self.db.collection('portfolio_feedback')
            self.is_firestore_available = True
            print("Conexi√≥n exitosa a Firestore")
        except Exception as e:
            print(f"Error al conectar con Firestore: {str(e)}")
            self.is_firestore_available = False
            # Crear directorio local para almacenamiento de respaldo
            local_dir = Path(__file__).parent.parent.parent / "feedback_data"
            local_dir.mkdir(exist_ok=True)
            print(f"Usando almacenamiento local en: {local_dir}")
            self.local_dir = local_dir

    def save_feedback(self, feedback_data):
        """Guarda el feedback en Firestore o localmente"""
        # Genera ID √∫nico si no se proporciona nombre
        user_id = feedback_data.get('name', str(uuid.uuid4())[:8])
        feedback_id = str(uuid.uuid4())
        
        # Estructura del feedback
        feedback_entry = {
            'id': feedback_id,
            'timestamp': datetime.now().isoformat(),
            'user_id': user_id,
            'user_name': feedback_data.get('name', 'An√≥nimo'),
            'email': feedback_data.get('email', 'an√≥nimo'),
            'message': feedback_data['message'],
            'content': feedback_data['message'],  # Duplicado para compatibilidad
            'category': feedback_data.get('category', 'general'),
            'app_section': feedback_data.get('category', 'general'),
            'rating': feedback_data.get('rating', 5),
            'status': 'pending'  # Por defecto, comentarios requieren aprobaci√≥n
        }
        
        # Guarda en Firestore o localmente
        try:
            if self.is_firestore_available:
                # Guardar en Firestore
                self.collection.document(feedback_id).set(feedback_entry)
                print(f"Feedback guardado en Firestore con ID: {feedback_id}")
            else:
                # Guardar localmente si no hay Firestore
                local_path = Path(__file__).parent.parent.parent / "feedback_data" / f"{feedback_entry['id']}.json"
                with open(local_path, 'w', encoding='utf-8') as f:
                    json.dump(feedback_entry, f, ensure_ascii=False, indent=2)
                print(f"Feedback guardado localmente con ID: {feedback_id}")
                
        except Exception as e:
            st.error(f"Error al guardar feedback: {str(e)}")
            # Intento de guardar localmente como respaldo
            try:
                local_path = Path(__file__).parent.parent.parent / "feedback_data" / f"{feedback_entry['id']}.json"
                with open(local_path, 'w', encoding='utf-8') as f:
                    json.dump(feedback_entry, f, ensure_ascii=False, indent=2)
                print(f"Feedback guardado localmente (respaldo) con ID: {feedback_id}")
            except Exception as e2:
                print(f"Error al guardar respaldo local: {str(e2)}")
        
        return feedback_id
        
    def get_comments(self, limit=5, only_approved=True):
        """Obtiene comentarios recientes de Firestore o almacenamiento local"""
        comments = []
        
        try:
            if self.is_firestore_available:
                # Obtener de Firestore
                query = self.collection
                if only_approved:
                    query = query.where('status', '==', 'approved')
                results = query.order_by('timestamp', direction=firestore.Query.DESCENDING).limit(limit).stream()
                
                for doc in results:
                    comments.append(doc.to_dict())
            else:
                # Obtener de almacenamiento local
                files = list(self.local_dir.glob('*.json'))
                files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                
                for file_path in files[:limit]:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        comment = json.load(f)
                        if not only_approved or comment.get('status') == 'approved':
                            comments.append(comment)
                            
        except Exception as e:
            print(f"Error al obtener comentarios: {str(e)}")
            
        return comments

# CSS personalizado
st.markdown("""
<style>
    .feedback-header {
        background: linear-gradient(90deg, #4f46e5, #6366f1);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 1.5rem;
    }
    
    .feedback-box {
        background: #f1f5f9;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    
    .success-message {
        background: #dcfce7;
        color: #166534;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        border-left: 4px solid #16a34a;
    }
    
    .error-message {
        background: #fee2e2;
        color: #991b1b;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
        border-left: 4px solid #ef4444;
    }
</style>
""", unsafe_allow_html=True)

class FeedbackApp:
    """Aplicaci√≥n principal de feedback"""
    
    def __init__(self):
        """Inicializa la aplicaci√≥n"""
        self.feedback_system = FeedbackSystem()
        
    def render_header(self):
        """Renderiza el encabezado principal"""
        st.markdown("""
        <div class="feedback-header">
            <h1>üìù Comentarios y Sugerencias</h1>
            <p>¬°Tu opini√≥n es importante! Ay√∫danos a mejorar este portafolio</p>
        </div>
        """, unsafe_allow_html=True)
        
    def render_feedback_form(self):
        """Renderiza el formulario de feedback"""
        st.markdown("""
        <div class="feedback-box">
            <h2>üí≠ Deja tu comentario</h2>
            <p>Nos encantar√≠a conocer tu opini√≥n sobre el portafolio, sugerencias de mejora o ideas para nuevos an√°lisis.</p>
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("feedback_form"):
            name = st.text_input("Nombre (opcional)", "")
            email = st.text_input("Email (opcional)", "")
            category = st.selectbox(
                "Categor√≠a",
                ["General", "Sugerencia", "Error/Bug", "Nueva Funcionalidad"]
            )
            rating = st.slider("Calificaci√≥n", 1, 5, 5)
            message = st.text_area(
                "Tu mensaje",
                height=150,
                placeholder="Escribe aqu√≠ tu comentario o sugerencia..."
            )
            
            submit = st.form_submit_button("Enviar Feedback")
            
            if submit and message:  # Asegurarse de que hay un mensaje
                try:
                    feedback_id = self.feedback_system.save_feedback({
                        'name': name,
                        'email': email,
                        'category': category,
                        'rating': rating,
                        'message': message
                    })
                    st.markdown(f"""
                    <div class="success-message">
                        <strong>¬°Gracias por tu feedback!</strong><br>
                        Tu mensaje ha sido registrado con el ID: {feedback_id}
                    </div>
                    """, unsafe_allow_html=True)
                except Exception as e:
                    st.markdown(f"""
                    <div class="error-message">
                        <strong>No se pudo guardar el feedback:</strong><br>
                        {str(e)}
                    </div>
                    """, unsafe_allow_html=True)
            elif submit:
                st.warning("Por favor, escribe un mensaje antes de enviar.")
    
    def render_recent_comments(self):
        """Muestra comentarios recientes aprobados"""
        st.subheader("Comentarios recientes")
        
        comments = self.feedback_system.get_comments(limit=5, only_approved=True)
        
        if not comments:
            st.info("No hay comentarios para mostrar todav√≠a. ¬°S√© el primero en opinar!")
            return
            
        for comment in comments:
            with st.container():
                col1, col2 = st.columns([5, 1])
                with col1:
                    st.markdown(f"**{comment.get('user_name', 'An√≥nimo')}**")
                    st.caption(f"Fecha: {comment.get('timestamp', 'Desconocido').split('T')[0]}")
                    st.write(comment.get('message', comment.get('content', '')))
                with col2:
                    st.write("‚≠ê" * comment.get('rating', 5))
                st.divider()
                
    def render_information(self):
        """Renderiza informaci√≥n adicional"""
        st.markdown("## ‚ÑπÔ∏è Informaci√≥n")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            ### ¬øQu√© tipo de feedback puedes dejar?
            
            - üí° **Sugerencias de mejora**: Nuevas funcionalidades, cambios en la interfaz, etc.
            - üêû **Reporte de errores**: Si encuentras alg√∫n problema o error en las aplicaciones
            - üìä **Ideas para nuevos an√°lisis**: Temas que te gustar√≠a que incluy√©ramos
            - üëç **Comentarios generales**: Tu opini√≥n general sobre el portafolio
            """)
        
        with col2:
            st.markdown("""
            ### ¬øQu√© hacemos con tu feedback?
            
            - üìù **Revisamos todos los comentarios** cuidadosamente
            - üöÄ **Implementamos mejoras** basadas en las sugerencias
            - üîÑ **Actualizamos peri√≥dicamente** el portafolio
            - üí™ **Mejoramos constantemente** las aplicaciones
            
            _Nota: Tu informaci√≥n de contacto es opcional y solo se utiliza para responder a tu feedback si es necesario._
            """)
                
    def run(self):
        """Ejecuta la aplicaci√≥n principal"""
        # Renderizar componentes
        self.render_header()
        
        # Crear pesta√±as para separar formulario y comentarios recientes
        tab1, tab2 = st.tabs(["Dejar un comentario", "Ver comentarios recientes"])
        
        with tab1:
            self.render_feedback_form()
            
        with tab2:
            self.render_recent_comments()
            
        self.render_information()
        
        # Footer
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center; color: #64748b; padding: 1rem;'>
            üìù <strong>Sistema de Feedback</strong><br>
            Desarrollado como parte del DS Portfolio | Junio 2025
        </div>
        """, unsafe_allow_html=True)
    
    def __call__(self):
        """Hace que la clase sea llamable"""
        self.run()
        
# Crear instancia global de la aplicaci√≥n
app = FeedbackApp()

def run():
    """Punto de entrada principal para Streamlit"""
    app.run()
    
if __name__ == "__main__":
    run()
