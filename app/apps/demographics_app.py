"""
Aplicaci√≥n de An√°lisis Demogr√°fico con BigQuery
==============================================

Esta aplicaci√≥n visualiza y analiza tendencias demogr√°ficas hist√≥ricas de nombres
en Estados Unidos desde 1910 hasta 2013, utilizando datos de BigQuery.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import sys
from pathlib import Path
from datetime import datetime

# Configuraci√≥n de directorios
PROJECT_DIR = Path(__file__).resolve().parent.parent.parent
NOTEBOOKS_DIR = PROJECT_DIR / 'notebooks'
DATA_DIR = NOTEBOOKS_DIR / 'data'
VISUALIZATIONS_DIR = NOTEBOOKS_DIR / 'visualizaciones'

# Configuraci√≥n de estilos y colores
GENDER_COLORS = {
    'M': '#1f77b4',  # Azul
    'F': '#e377c2'   # Rosa
}

GENDER_NAMES = {
    'M': 'Masculino',
    'F': 'Femenino'
}

DECADES = list(range(1910, 2020, 10))

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #6366f1, #8b5cf6);
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        color: white;
        margin: 0;
        font-size: 2.5rem;
    }
    
    .main-header p {
        color: rgba(255,255,255,0.9);
        margin: 0.5rem 0 0 0;
        font-size: 1.1rem;
    }
    
    .stat-box {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #6366f1;
    }
    
    .stat-label {
        color: #4b5563;
        margin-top: 0.5rem;
    }
    
    .info-box {
        background: #f3f4f6;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class DemographicsApp:
    """Aplicaci√≥n para an√°lisis demogr√°fico con BigQuery"""
    
    def __init__(self):
        """Inicializa la aplicaci√≥n"""
        self.data = None
        self.data_paths = {
            'names': DATA_DIR / 'nombres_demografia.csv',
            'html_viz': VISUALIZATIONS_DIR / 'tendencias_nombres.html',
            'png_viz': VISUALIZATIONS_DIR / 'tendencias_nombres.png',
        }
    
    def load_data(self):
        """Carga los datos para el an√°lisis"""
        try:
            if self.data_paths['names'].exists():
                self.data = pd.read_csv(self.data_paths['names'])
                if 'decade' in self.data.columns:
                    self.data['decade'] = self.data['decade'].astype(int)
                return True
            else:
                st.warning("No se encontraron datos precalculados. Usando datos de demostraci√≥n.")
                self.data = self._create_demo_data()
                return False
        except Exception as e:
            st.error(f"Error al cargar datos: {str(e)}")
            return False
    
    def _create_demo_data(self):
        """Crea datos de demostraci√≥n"""
        decades = range(1910, 2020, 10)
        names_m = ['Juan', 'Carlos', 'Luis', 'Miguel', 'Pedro']
        names_f = ['Mar√≠a', 'Ana', 'Laura', 'Isabel', 'Carmen']
        
        data = []
        for decade in decades:
            for name in names_m:
                count = np.random.randint(1000, 10000)
                data.append({'name': name, 'gender': 'M', 'decade': decade, 'total_count': count})
            for name in names_f:
                count = np.random.randint(1000, 10000)
                data.append({'name': name, 'gender': 'F', 'decade': decade, 'total_count': count})
        
        return pd.DataFrame(data)
    
    def render_header(self):
        """Muestra el encabezado de la aplicaci√≥n"""
        st.markdown("""
        <div class="main-header">
            <h1>üë§ An√°lisis Demogr√°fico Hist√≥rico</h1>
            <p>Exploraci√≥n de tendencias en nombres (1910-2013) usando BigQuery</p>
        </div>
        """, unsafe_allow_html=True)
    
    def render_overview_metrics(self):
        """Muestra m√©tricas generales del an√°lisis"""
        if self.data is None:
            return
            
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_births = self.data['total_count'].sum()
            st.markdown(f"""
            <div class="stat-box">
                <div class="stat-number">{total_births:,.0f}</div>
                <div class="stat-label">Nacimientos Registrados</div>
            </div>
            """, unsafe_allow_html=True)
            
        with col2:
            unique_names = self.data['name'].nunique()
            st.markdown(f"""
            <div class="stat-box">
                <div class="stat-number">{unique_names:,}</div>
                <div class="stat-label">Nombres √önicos</div>
            </div>
            """, unsafe_allow_html=True)
            
        with col3:
            year_range = f"{self.data['decade'].min()}-{self.data['decade'].max()}"
            st.markdown(f"""
            <div class="stat-box">
                <div class="stat-number">{year_range}</div>
                <div class="stat-label">Per√≠odo de An√°lisis</div>
            </div>
            """, unsafe_allow_html=True)
    
    def render_trends_visualization(self):
        """Muestra las visualizaciones de tendencias"""
        st.subheader("üìà Tendencias de Nombres Populares")
        
        # Intentar mostrar visualizaci√≥n HTML existente
        if self.data_paths['html_viz'].exists():
            with open(self.data_paths['html_viz'], 'r', encoding='utf-8') as f:
                html_content = f.read()
                st.components.v1.html(
                    html_content,
                    height=900,
                    scrolling=True
                )
        else:
            # Crear visualizaci√≥n en tiempo real
            fig = self.create_name_trends_visualization()
            if fig:
                st.plotly_chart(fig, use_container_width=True)
    
    def render_gender_analysis(self):
        """Muestra an√°lisis por g√©nero"""
        if self.data is None:
            return
            
        st.subheader("üë• An√°lisis por G√©nero")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Top nombres masculinos
            df_m = self.data[self.data['gender'] == 'M']
            top_m = df_m.groupby('name')['total_count'].sum().sort_values(ascending=False).head(5)
            
            fig_m = go.Figure(data=[
                go.Bar(
                    x=top_m.index,
                    y=top_m.values,
                    marker_color=GENDER_COLORS['M']
                )
            ])
            fig_m.update_layout(
                title="Top 5 Nombres Masculinos",
                height=400
            )
            st.plotly_chart(fig_m, use_container_width=True)
            
        with col2:
            # Top nombres femeninos
            df_f = self.data[self.data['gender'] == 'F']
            top_f = df_f.groupby('name')['total_count'].sum().sort_values(ascending=False).head(5)
            
            fig_f = go.Figure(data=[
                go.Bar(
                    x=top_f.index,
                    y=top_f.values,
                    marker_color=GENDER_COLORS['F']
                )
            ])
            fig_f.update_layout(
                title="Top 5 Nombres Femeninos",
                height=400
            )
            st.plotly_chart(fig_f, use_container_width=True)
    
    def render_temporal_analysis(self):
        """Muestra an√°lisis temporal"""
        if self.data is None:
            return
            
        st.subheader("‚è≥ Evoluci√≥n Temporal")
        
        # Diversidad de nombres por d√©cada
        df_diversity = self.data.groupby(['decade', 'gender'])['name'].nunique().reset_index()
        
        fig = px.line(
            df_diversity,
            x='decade',
            y='name',
            color='gender',
            color_discrete_map=GENDER_COLORS,
            labels={'name': 'Nombres √önicos', 'decade': 'D√©cada', 'gender': 'G√©nero'},
            title='Diversidad de Nombres por D√©cada'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    def render_methodology(self):
        """Muestra informaci√≥n sobre la metodolog√≠a"""
        with st.expander("‚ÑπÔ∏è Metodolog√≠a y Fuentes de Datos"):
            st.markdown("""
            ### üìä Fuente de Datos
            
            Este an√°lisis utiliza el conjunto de datos p√∫blico de nombres de Estados Unidos disponible
            en Google BigQuery (`bigquery-public-data.usa_names.usa_1910_2013`).
            
            ### üîç Metodolog√≠a de An√°lisis
            
            1. **Extracci√≥n de Datos**
               - Consultas SQL a BigQuery
               - Procesamiento con pandas
               - Agregaci√≥n por d√©cadas
            
            2. **M√©tricas Calculadas**
               - Total de nacimientos por nombre y g√©nero
               - Diversidad de nombres por d√©cada
               - Tendencias temporales
            
            3. **Visualizaciones**
               - Gr√°ficos interactivos con Plotly
               - Exportaci√≥n a HTML y PNG
               - An√°lisis comparativo por g√©nero
            
            ### ‚ö†Ô∏è Limitaciones
            
            - Los datos est√°n limitados a EE.UU.
            - Per√≠odo temporal: 1910-2013
            - Solo nombres con m√°s de 5 ocurrencias por a√±o
            - Posibles sesgos en el registro hist√≥rico
            """)
    
    def create_name_trends_visualization(self):
        """Crea visualizaci√≥n de tendencias de nombres populares"""
        if self.data is None:
            return None
            
        # Preparar datos
        df_trends = self.data.groupby(['decade', 'name', 'gender'])['total_count'].sum().reset_index()
        df_trends = df_trends.sort_values(['decade', 'total_count'], ascending=[True, False])
        
        # Crear figura con subplots
        fig = make_subplots(
            rows=2, cols=1,
            subplot_titles=('Nombres Masculinos m√°s Populares por D√©cada', 
                          'Nombres Femeninos m√°s Populares por D√©cada'),
            vertical_spacing=0.12,
            row_heights=[0.5, 0.5]
        )
        
        # Procesar datos por g√©nero
        for idx, (gender, title) in enumerate([('M', 'Masculinos'), ('F', 'Femeninos')]):
            df_gender = df_trends[df_trends['gender'] == gender]
            top_names = []
            
            # Obtener top 5 nombres por d√©cada
            for decade in DECADES:
                decade_names = df_gender[df_gender['decade'] == decade] \
                    .nlargest(5, 'total_count')['name'].tolist()
                top_names.extend(decade_names)
            
            top_names = list(set(top_names))  # Eliminar duplicados
            
            # Crear l√≠neas para cada nombre
            for name in top_names:
                name_data = df_gender[df_gender['name'] == name]
                
                fig.add_trace(
                    go.Scatter(
                        x=name_data['decade'],
                        y=name_data['total_count'],
                        name=name,
                        mode='lines+markers',
                        line=dict(width=2),
                        marker=dict(size=6),
                        showlegend=True
                    ),
                    row=idx+1, col=1
                )
        
        # Actualizar layout
        fig.update_layout(
            height=800,
            title_text="Tendencias de Nombres Populares (1910-2013)",
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-0.2,
                xanchor="center",
                x=0.5
            )
        )
        
        # Actualizar ejes
        fig.update_xaxes(title_text="D√©cada", row=1, col=1)
        fig.update_xaxes(title_text="D√©cada", row=2, col=1)
        fig.update_yaxes(title_text="N√∫mero de Nacimientos", row=1, col=1)
        fig.update_yaxes(title_text="N√∫mero de Nacimientos", row=2, col=1)
        
        return fig
    
    def run(self):
        """Ejecuta la aplicaci√≥n principal"""
        # Cargar datos
        self.load_data()
        
        # Renderizar interfaz
        self.render_header()
        
        # M√©tricas generales
        self.render_overview_metrics()
        
        # Separador
        st.markdown("---")
        
        # Crear tabs para diferentes an√°lisis
        tab1, tab2, tab3 = st.tabs([
            "üìà Tendencias Hist√≥ricas",
            "üë• An√°lisis por G√©nero",
            "‚è≥ An√°lisis Temporal"
        ])
        
        with tab1:
            self.render_trends_visualization()
        
        with tab2:
            self.render_gender_analysis()
        
        with tab3:
            self.render_temporal_analysis()
        
        # Metodolog√≠a
        st.markdown("---")
        self.render_methodology()
        
        # Footer
        st.markdown("---")
        st.markdown("""
        <div style='text-align: center; color: #64748b; padding: 1rem;'>
            üë§ <strong>An√°lisis Demogr√°fico Hist√≥rico</strong> | 
            Datos: BigQuery Public Datasets (usa_names) | 
            üìä <strong>Portafolio Data Science</strong>
        </div>
        """, unsafe_allow_html=True)

def run():
    """Punto de entrada para la aplicaci√≥n cuando se carga desde el portafolio"""
    app = DemographicsApp()
    app.run()

if __name__ == "__main__":
    # Solo configurar la p√°gina si se ejecuta directamente (no desde el portafolio)
    st.set_page_config(
        page_title="üë§ An√°lisis Demogr√°fico - Tendencias Hist√≥ricas",
        page_icon="üë§",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    run()
